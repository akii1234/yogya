# üß™ YOGYA - TEST USER CREDENTIALS
# ======================================
# This file contains test credentials for both HR and Candidate users
# Use these credentials to test the application functionality

## üîê AUTHENTICATION ENDPOINTS
# ===========================
# Login: POST /api/token/
# Register: POST /api/users/auth/register/
# Refresh: POST /api/token/refresh/

## üë• HR USERS (Recruiter/Hiring Manager)
# ======================================

### HR Manager (Primary Test User)
- **Email:** hr@yogya.com
- **Password:** hr123456
- **Role:** HR/Recruiter
- **Name:** HR Manager
- **User ID:** 5d39a521-523f-46ec-9d3b-67965996d9b9
- **Organization:** Yogya (auto-detected from email domain)
- **Access:** Full HR dashboard, job management, candidate management, automatic ranking

### Additional HR Users (Can be created)
- **Email:** hiring.manager@yogya.com
- **Password:** manager123
- **Role:** Hiring Manager
- **Organization:** Yogya
- **Access:** Job creation, interview scheduling, candidate evaluation

## üë§ CANDIDATE USERS
# ===================

### Test Candidate (Primary Test User)
- **Email:** candidate@yogya.com
- **Password:** candidate123
- **Role:** Candidate
- **Name:** John Candidate
- **User ID:** b6bb3f6b-b382-4da9-8042-521cd47040a0
- **Access:** Browse jobs, apply to positions, manage profile, view match analysis

### Active Test Candidates (In Database)
- **Email:** akhiltripathi.t1@gmail.com
- **Password:** (created via registration)
- **Role:** Candidate
- **Name:** Akhil Tripathi
- **Skills:** Python, Django, React, JavaScript, AWS, Docker
- **Experience:** 3 years
- **Status:** Active with applications

- **Email:** john.doe@example.com
- **Password:** (created via registration)
- **Role:** Candidate
- **Name:** John Doe
- **Skills:** Java, Spring Boot, Microservices, Kubernetes
- **Experience:** 5 years
- **Status:** Active with applications

- **Email:** anupam.sharma@example.com
- **Password:** (created via registration)
- **Role:** Candidate
- **Name:** Anupam Sharma
- **Skills:** Frontend Development, React, TypeScript, UI/UX
- **Experience:** 2 years
- **Status:** Active with applications

## üöÄ QUICK LOGIN COMMANDS
# ========================

### HR Login (curl)
```bash
curl -X POST "http://localhost:8001/api/token/" \
  -H "Content-Type: application/json" \
  -d '{"email":"hr@yogya.com","password":"hr123456"}'
```

### Candidate Login (curl)
```bash
curl -X POST "http://localhost:8001/api/token/" \
  -H "Content-Type: application/json" \
  -d '{"email":"candidate@yogya.com","password":"candidate123"}'
```

### Test Candidate Login (curl)
```bash
curl -X POST "http://localhost:8001/api/token/" \
  -H "Content-Type: application/json" \
  -d '{"email":"akhiltripathi.t1@gmail.com","password":"your_password"}'
```

## üì± FRONTEND LOGIN
# ==================
# Use these credentials in the frontend login form:
# - Navigate to: http://localhost:5173 (or current frontend port)
# - Enter email and password
# - System will automatically detect role and redirect to appropriate dashboard

## üîß API TESTING
# ===============
# After login, use the access token in Authorization header:
# Authorization: Bearer <access_token>

### Example API calls with token:
```bash
# Get HR dashboard data
curl -X GET "http://localhost:8001/api/hr-dashboard/" \
  -H "Authorization: Bearer <access_token>"

# Get candidate profile
curl -X GET "http://localhost:8001/api/users/profiles/me/" \
  -H "Authorization: Bearer <access_token>"

# Browse jobs (candidate)
curl -X GET "http://localhost:8001/api/candidate-portal/browse-jobs/" \
  -H "Authorization: Bearer <access_token>"

# Get candidate rankings (HR)
curl -X GET "http://localhost:8001/api/candidate-ranking/job/1/" \
  -H "Authorization: Bearer <access_token>"

# Apply to job (candidate)
curl -X POST "http://localhost:8001/api/candidate-portal/apply-job/" \
  -H "Authorization: Bearer <access_token>" \
  -H "Content-Type: application/json" \
  -d '{"job_id": 1}'
```

## üéØ FEATURES BY ROLE
# ====================

### HR Features:
- ‚úÖ Dashboard with KPIs and analytics
- ‚úÖ Job Description management (create, edit, delete, bulk upload)
- ‚úÖ Candidate management and tracking
- ‚úÖ **Automatic Candidate Ranking** ‚≠ê CORE USP
- ‚úÖ Competency framework management
- ‚úÖ Interview scheduling and management
- ‚úÖ Application review and status updates
- ‚úÖ **Organization Management** (auto-detection from email domain)
- ‚úÖ **LLM Question Generator** (AI-powered question creation)
- ‚úÖ **Interviewer/Panel Role Management**

### Candidate Features:
- ‚úÖ Browse available jobs
- ‚úÖ Apply to positions (triggers automatic ranking)
- ‚úÖ Track application status
- ‚úÖ Manage profile and skills
- ‚úÖ Upload and manage resumes (PDF, DOCX support)
- ‚úÖ **View Detailed Match Analysis** (skills, experience, education, location)
- ‚úÖ **Enhanced Coding Questions Playground**
- ‚úÖ **Interview Management** (view scheduled interviews)

## üöÄ NEW FEATURES (v1.4)
# ========================

### **Automatic Candidate Ranking** ‚≠ê CORE USP
- **How it works:** Rankings automatically generated when candidates apply
- **Scoring:** Skills (40%), Experience (30%), Education (20%), Location (10%)
- **Real-time:** New candidates appear in rankings immediately
- **HR Access:** View ranked candidates in HR portal

### **Organization Management**
- **Auto-detection:** Organization set based on email domain
- **Mandatory setup:** First-time HR users must set organization
- **Dynamic messaging:** "Creating job for: [Organization]"
- **Settings integration:** Editable in user preferences

### **Enhanced Resume Processing**
- **Robust PDF parsing:** Multiple fallback methods (PyPDF2, pdfplumber)
- **Text file detection:** Handles mislabeled PDF files
- **Skill extraction:** AI-powered skill identification
- **Multiple formats:** PDF, DOCX, TXT support

### **AI Integration**
- **Gemini AI:** Primary AI provider for question generation
- **Fallback system:** Traditional matching when AI unavailable
- **Enhanced questions:** Personalized coding questions
- **Interview assistance:** AI-powered interview suggestions

## üîÑ TOKEN REFRESH
# =================
# Access tokens expire in 1 hour. Use refresh token to get new access token:
```bash
curl -X POST "http://localhost:8001/api/token/refresh/" \
  -H "Content-Type: application/json" \
  -d '{"refresh":"<refresh_token>"}'
```

## üõ†Ô∏è TROUBLESHOOTING
# ===================
# If login fails:
# 1. Check if backend server is running (port 8001)
# 2. Check if frontend server is running (port 5173)
# 3. Verify CORS settings
# 4. Check browser console for errors
# 5. Verify user status is 'active' in database

# If candidate ranking not working:
# 1. Ensure candidates have applied to jobs
# 2. Check if skills are extracted from resumes
# 3. Verify job descriptions have extracted skills
# 4. Run: python generate_missing_rankings.py (if needed)

# If resume upload fails:
# 1. Check file format (PDF, DOCX, TXT)
# 2. Verify file is not corrupted
# 3. Check console for parsing errors
# 4. Try different file format

## üìä TEST DATA STATUS
# ====================
# - **Jobs:** Multiple job descriptions with extracted skills
# - **Candidates:** 3 active candidates with skills and applications
# - **Rankings:** Auto-generated for all applications
# - **Resumes:** Sample resumes available in /sample_resumes/
# - **Organizations:** Yogya (auto-detected from HR email domain)

## üìù NOTES
# ==========
# - All test users are created with 'active' status
# - Automatic candidate ranking is the core USP feature
# - Organization setup is mandatory for HR users
# - JWT tokens are used for authentication
# - Session-based auth is also available for admin interface
# - AI features use Gemini as primary provider with fallbacks

## üîí SECURITY REMINDER
# ====================
# ‚ö†Ô∏è  These are TEST credentials only!
# ‚ö†Ô∏è  Do NOT use these passwords in production
# ‚ö†Ô∏è  Change passwords before deploying to production
# ‚ö†Ô∏è  Use environment variables for sensitive data
# ‚ö†Ô∏è  API keys and tokens should be stored securely

# Last Updated: January 2025
# Version: v1.4 (Automatic Ranking Enabled)
# Created by: Yogya Development Team 