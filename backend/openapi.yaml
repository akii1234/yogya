openapi: 3.0.2
info:
  title: 'Yogya HR Platform API'
  version: '2.0.0'
  description: |
    Comprehensive HR platform API for resume parsing, candidate ranking, competency hiring, and user management.
    
    ## Core Modules:
    - **Resume Checker**: Resume parsing, job matching, and candidate management
    - **Candidate Ranking**: Intelligent candidate ranking and shortlisting system
    - **Competency Hiring**: Interview templates, sessions, and evaluations
    - **User Management**: Multi-role user profiles and authentication
    - **Code Executor**: Programming assessment capabilities
    
    ## Authentication:
    This API uses JWT (JSON Web Tokens) for authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your_access_token>
    ```
    
    ## Rate Limiting:
    API requests are rate-limited to ensure fair usage. Please implement appropriate retry logic.
  contact:
    name: Yogya Development Team
    email: support@yogya.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
paths:
  /api/job_descriptions/:
    get:
      operationId: listJobDescriptions
      description: 'ViewSet for managing Job Descriptions.

        Includes custom actions for matching resumes and extracting skills.'
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobDescription'
          description: ''
      tags:
      - api
    post:
      operationId: createJobDescription
      description: 'ViewSet for managing Job Descriptions.

        Includes custom actions for matching resumes and extracting skills.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobDescription'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/JobDescription'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/JobDescription'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDescription'
          description: ''
      tags:
      - api
  /api/job_descriptions/{id}/:
    get:
      operationId: retrieveJobDescription
      description: 'ViewSet for managing Job Descriptions.

        Includes custom actions for matching resumes and extracting skills.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Job Description.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDescription'
          description: ''
      tags:
      - api
    put:
      operationId: updateJobDescription
      description: 'ViewSet for managing Job Descriptions.

        Includes custom actions for matching resumes and extracting skills.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Job Description.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobDescription'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/JobDescription'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/JobDescription'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDescription'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateJobDescription
      description: 'ViewSet for managing Job Descriptions.

        Includes custom actions for matching resumes and extracting skills.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Job Description.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobDescription'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/JobDescription'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/JobDescription'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDescription'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyJobDescription
      description: 'ViewSet for managing Job Descriptions.

        Includes custom actions for matching resumes and extracting skills.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Job Description.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/job_descriptions/{id}/matches/:
    get:
      operationId: getMatchesForJdJobDescription
      description: 'Get existing matches for a specific job description (read-only).

        Returns existing match results without recalculating.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Job Description.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDescription'
          description: ''
      tags:
      - api
  /api/resumes/:
    get:
      operationId: listResumes
      description: 'ViewSet for managing Resumes.

        Includes custom actions for matching with job descriptions and file processing.'
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Resume'
          description: ''
      tags:
      - api
    post:
      operationId: createResume
      description: Override to handle file upload and text extraction.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resume'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Resume'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Resume'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume'
          description: ''
      tags:
      - api
  /api/resumes/{id}/:
    get:
      operationId: retrieveResume
      description: 'ViewSet for managing Resumes.

        Includes custom actions for matching with job descriptions and file processing.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Resume.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume'
          description: ''
      tags:
      - api
    put:
      operationId: updateResume
      description: 'ViewSet for managing Resumes.

        Includes custom actions for matching with job descriptions and file processing.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Resume.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resume'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Resume'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Resume'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateResume
      description: 'ViewSet for managing Resumes.

        Includes custom actions for matching with job descriptions and file processing.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Resume.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resume'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Resume'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Resume'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyResume
      description: 'ViewSet for managing Resumes.

        Includes custom actions for matching with job descriptions and file processing.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Resume.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/resumes/{id}/matches/:
    get:
      operationId: getMatchesForResumeResume
      description: 'Get existing matches for a specific resume (read-only).

        Returns existing match results without recalculating.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Resume.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume'
          description: ''
      tags:
      - api
  /api/candidates/:
    get:
      operationId: listCandidates
      description: 'ViewSet for managing Candidates.

        Includes custom actions for skill management.'
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Candidate'
          description: ''
      tags:
      - api
    post:
      operationId: createCandidate
      description: 'ViewSet for managing Candidates.

        Includes custom actions for skill management.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Candidate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Candidate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Candidate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
          description: ''
      tags:
      - api
  /api/candidates/{id}/:
    get:
      operationId: retrieveCandidate
      description: 'ViewSet for managing Candidates.

        Includes custom actions for skill management.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Candidate.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
          description: ''
      tags:
      - api
    put:
      operationId: updateCandidate
      description: 'ViewSet for managing Candidates.

        Includes custom actions for skill management.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Candidate.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Candidate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Candidate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Candidate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateCandidate
      description: 'ViewSet for managing Candidates.

        Includes custom actions for skill management.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Candidate.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Candidate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Candidate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Candidate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyCandidate
      description: 'ViewSet for managing Candidates.

        Includes custom actions for skill management.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Candidate.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/candidates/{id}/skills/:
    get:
      operationId: getSkillsCandidate
      description: Get all skills for a candidate.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Candidate.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
          description: ''
      tags:
      - api
  /api/matches/:
    get:
      operationId: listMatches
      description: List matches with optional filtering by job_description_id and
        resume_id.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Match'
          description: ''
      tags:
      - api
    post:
      operationId: createMatch
      description: ViewSet for managing Matches.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Match'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Match'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
          description: ''
      tags:
      - api
  /api/matches/{id}/:
    get:
      operationId: retrieveMatch
      description: ViewSet for managing Matches.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Match.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
          description: ''
      tags:
      - api
    put:
      operationId: updateMatch
      description: ViewSet for managing Matches.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Match.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Match'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Match'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateMatch
      description: ViewSet for managing Matches.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Match.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Match'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Match'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyMatch
      description: ViewSet for managing Matches.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Match.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/applications/:
    get:
      operationId: listApplications
      description: 'ViewSet for managing Applications.

        Includes analytics and conversion tracking.'
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Application'
          description: ''
      tags:
      - api
    post:
      operationId: createApplication
      description: 'ViewSet for managing Applications.

        Includes analytics and conversion tracking.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Application'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: ''
      tags:
      - api
  /api/applications/analytics/:
    get:
      operationId: analyticsApplication
      description: Get comprehensive analytics about applications and conversions.
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: ''
      tags:
      - api
  /api/applications/conversion-metrics/:
    get:
      operationId: conversionMetricsApplication
      description: Get detailed conversion metrics from matches to applications.
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: ''
      tags:
      - api
  /api/applications/{id}/:
    get:
      operationId: retrieveApplication
      description: 'ViewSet for managing Applications.

        Includes analytics and conversion tracking.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Application.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: ''
      tags:
      - api
    put:
      operationId: updateApplication
      description: 'ViewSet for managing Applications.

        Includes analytics and conversion tracking.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Application.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Application'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateApplication
      description: 'ViewSet for managing Applications.

        Includes analytics and conversion tracking.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Application.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Application'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyApplication
      description: 'ViewSet for managing Applications.

        Includes analytics and conversion tracking.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Application.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/candidate-portal/browse-jobs/:
    get:
      operationId: browseJobsCandidatePortalViewSet
      description: 'Browse available jobs with filtering and search capabilities.

        Includes ATS match scores for the candidate.'
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/candidate-portal/candidate-profile/:
    get:
      operationId: candidateProfileCandidatePortalViewSet
      description: Get candidate profile information.
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/candidate-portal/job-details/:
    get:
      operationId: jobDetailsCandidatePortalViewSet
      description: Get detailed information about a specific job.
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/candidate-portal/my-applications/:
    get:
      operationId: myApplicationsCandidatePortalViewSet
      description: Get applications for a specific candidate.
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/candidate-portal/my-resumes/:
    get:
      operationId: myResumesCandidatePortalViewSet
      description: Get all resumes for a candidate.
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/users/profiles/:
    get:
      operationId: listUserProfiles
      description: User profile management.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserProfile'
          description: ''
      tags:
      - api
    post:
      operationId: createUserProfile
      description: User profile management.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
      tags:
      - api
  /api/users/profiles/me/:
    get:
      operationId: meUserProfile
      description: Get current user's profile.
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
      tags:
      - api
  /api/users/profiles/{id}/:
    get:
      operationId: retrieveUserProfile
      description: User profile management.
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
      tags:
      - api
    put:
      operationId: updateUserProfile
      description: User profile management.
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateUserProfile
      description: User profile management.
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyUserProfile
      description: User profile management.
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/users/hr-profiles/:
    get:
      operationId: listHRProfiles
      description: HR profile management.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/HRProfile'
          description: ''
      tags:
      - api
    post:
      operationId: createHRProfile
      description: HR profile management.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HRProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HRProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HRProfile'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HRProfile'
          description: ''
      tags:
      - api
  /api/users/hr-profiles/my_profile/:
    get:
      operationId: myProfileHRProfile
      description: Get current HR user's profile.
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HRProfile'
          description: ''
      tags:
      - api
  /api/users/hr-profiles/{id}/:
    get:
      operationId: retrieveHRProfile
      description: HR profile management.
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HRProfile'
          description: ''
      tags:
      - api
    put:
      operationId: updateHRProfile
      description: HR profile management.
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HRProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HRProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HRProfile'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HRProfile'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateHRProfile
      description: HR profile management.
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HRProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HRProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HRProfile'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HRProfile'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyHRProfile
      description: HR profile management.
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/users/candidate-profiles/:
    get:
      operationId: listCandidateProfiles
      description: Candidate profile management.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/CandidateProfile'
          description: ''
      tags:
      - api
    post:
      operationId: createCandidateProfile
      description: Candidate profile management.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CandidateProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CandidateProfile'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateProfile'
          description: ''
      tags:
      - api
  /api/users/candidate-profiles/my_profile/:
    get:
      operationId: myProfileCandidateProfile
      description: Get current candidate's profile.
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateProfile'
          description: ''
      tags:
      - api
  /api/users/candidate-profiles/{id}/:
    get:
      operationId: retrieveCandidateProfile
      description: Candidate profile management.
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateProfile'
          description: ''
      tags:
      - api
    put:
      operationId: updateCandidateProfile
      description: Candidate profile management.
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CandidateProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CandidateProfile'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateProfile'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateCandidateProfile
      description: Candidate profile management.
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CandidateProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CandidateProfile'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateProfile'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyCandidateProfile
      description: Candidate profile management.
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/users/sessions/:
    get:
      operationId: listUserSessions
      description: User session management (read-only for users, full access for admins).
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserSession'
          description: ''
      tags:
      - api
  /api/users/sessions/{id}/:
    get:
      operationId: retrieveUserSession
      description: User session management (read-only for users, full access for admins).
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSession'
          description: ''
      tags:
      - api
  /api/users/activities/:
    get:
      operationId: listUserActivities
      description: User activity tracking (read-only for users, full access for admins).
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserActivity'
          description: ''
      tags:
      - api
  /api/users/activities/{id}/:
    get:
      operationId: retrieveUserActivity
      description: User activity tracking (read-only for users, full access for admins).
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserActivity'
          description: ''
      tags:
      - api
  /api/users/admin/users/:
    get:
      operationId: listUsers
      description: Admin user management (admin only).
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserList'
          description: ''
      tags:
      - api
    post:
      operationId: createUser
      description: Admin user management (admin only).
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserList'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
      tags:
      - api
  /api/users/admin/users/{id}/:
    get:
      operationId: retrieveUser
      description: Admin user management (admin only).
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this User.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
      tags:
      - api
    put:
      operationId: updateUser
      description: Admin user management (admin only).
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this User.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserStatusUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserStatusUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserStatusUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatusUpdate'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateUser
      description: Admin user management (admin only).
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this User.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserStatusUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserStatusUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserStatusUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatusUpdate'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyUser
      description: Admin user management (admin only).
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this User.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/competency/frameworks/:
    get:
      operationId: listCompetencyFrameworks
      description: ViewSet for managing competency frameworks
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/CompetencyFramework'
          description: ''
      tags:
      - api
    post:
      operationId: createCompetencyFramework
      description: ViewSet for managing competency frameworks
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetencyFramework'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CompetencyFramework'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CompetencyFramework'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetencyFramework'
          description: ''
      tags:
      - api
  /api/competency/frameworks/{id}/:
    get:
      operationId: retrieveCompetencyFramework
      description: ViewSet for managing competency frameworks
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this competency framework.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetencyFramework'
          description: ''
      tags:
      - api
    put:
      operationId: updateCompetencyFramework
      description: ViewSet for managing competency frameworks
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this competency framework.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetencyFramework'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CompetencyFramework'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CompetencyFramework'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetencyFramework'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateCompetencyFramework
      description: ViewSet for managing competency frameworks
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this competency framework.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetencyFramework'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CompetencyFramework'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CompetencyFramework'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetencyFramework'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyCompetencyFramework
      description: ViewSet for managing competency frameworks
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this competency framework.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/competency/frameworks/{id}/competencies/:
    get:
      operationId: competenciesCompetencyFramework
      description: Get all competencies for a specific framework
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this competency framework.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetencyFramework'
          description: ''
      tags:
      - api
  /api/competency/competencies/:
    get:
      operationId: listCompetencies
      description: ViewSet for managing competencies
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Competency'
          description: ''
      tags:
      - api
    post:
      operationId: createCompetency
      description: ViewSet for managing competencies
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Competency'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Competency'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Competency'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Competency'
          description: ''
      tags:
      - api
  /api/competency/competencies/{id}/:
    get:
      operationId: retrieveCompetency
      description: ViewSet for managing competencies
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this competency.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Competency'
          description: ''
      tags:
      - api
    put:
      operationId: updateCompetency
      description: ViewSet for managing competencies
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this competency.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Competency'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Competency'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Competency'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Competency'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateCompetency
      description: ViewSet for managing competencies
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this competency.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Competency'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Competency'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Competency'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Competency'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyCompetency
      description: ViewSet for managing competencies
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this competency.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/competency/templates/:
    get:
      operationId: listInterviewTemplates
      description: ViewSet for managing interview templates
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/InterviewTemplate'
          description: ''
      tags:
      - api
    post:
      operationId: createInterviewTemplate
      description: ViewSet for managing interview templates
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewTemplate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InterviewTemplate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InterviewTemplate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewTemplate'
          description: ''
      tags:
      - api
  /api/competency/templates/{id}/:
    get:
      operationId: retrieveInterviewTemplate
      description: ViewSet for managing interview templates
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this interview template.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewTemplate'
          description: ''
      tags:
      - api
    put:
      operationId: updateInterviewTemplate
      description: ViewSet for managing interview templates
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this interview template.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewTemplate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InterviewTemplate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InterviewTemplate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewTemplate'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateInterviewTemplate
      description: ViewSet for managing interview templates
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this interview template.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewTemplate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InterviewTemplate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InterviewTemplate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewTemplate'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyInterviewTemplate
      description: ViewSet for managing interview templates
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this interview template.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/competency/templates/{id}/questions/:
    get:
      operationId: questionsInterviewTemplate
      description: Get all questions for a specific template
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this interview template.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewTemplate'
          description: ''
      tags:
      - api
  /api/competency/questions/:
    get:
      operationId: listInterviewQuestions
      description: ViewSet for managing interview questions
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/InterviewQuestion'
          description: ''
      tags:
      - api
    post:
      operationId: createInterviewQuestion
      description: ViewSet for managing interview questions
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewQuestion'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InterviewQuestion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InterviewQuestion'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewQuestion'
          description: ''
      tags:
      - api
  /api/competency/questions/{id}/:
    get:
      operationId: retrieveInterviewQuestion
      description: ViewSet for managing interview questions
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this interview question.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewQuestion'
          description: ''
      tags:
      - api
    put:
      operationId: updateInterviewQuestion
      description: ViewSet for managing interview questions
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this interview question.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewQuestion'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InterviewQuestion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InterviewQuestion'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewQuestion'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateInterviewQuestion
      description: ViewSet for managing interview questions
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this interview question.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewQuestion'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InterviewQuestion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InterviewQuestion'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewQuestion'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyInterviewQuestion
      description: ViewSet for managing interview questions
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this interview question.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/competency/question-bank/:
    get:
      operationId: listQuestionBanks
      description: ViewSet for managing question bank with tagging system
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/QuestionBank'
          description: ''
      tags:
      - api
    post:
      operationId: createQuestionBank
      description: ViewSet for managing question bank with tagging system
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionBank'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/QuestionBank'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionBank'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionBank'
          description: ''
      tags:
      - api
  /api/competency/question-bank/recommended_questions/:
    get:
      operationId: recommendedQuestionsQuestionBank
      description: Get AI-recommended questions based on context
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionBank'
          description: ''
      tags:
      - api
  /api/competency/question-bank/{id}/:
    get:
      operationId: retrieveQuestionBank
      description: ViewSet for managing question bank with tagging system
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this question bank.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionBank'
          description: ''
      tags:
      - api
    put:
      operationId: updateQuestionBank
      description: ViewSet for managing question bank with tagging system
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this question bank.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionBank'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/QuestionBank'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionBank'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionBank'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateQuestionBank
      description: ViewSet for managing question bank with tagging system
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this question bank.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionBank'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/QuestionBank'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionBank'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionBank'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyQuestionBank
      description: ViewSet for managing question bank with tagging system
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this question bank.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/competency/sessions/:
    get:
      operationId: listInterviewSessions
      description: ViewSet for managing interview sessions
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/InterviewSession'
          description: ''
      tags:
      - api
    post:
      operationId: createInterviewSession
      description: ViewSet for managing interview sessions
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewSessionCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InterviewSessionCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InterviewSessionCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewSessionCreate'
          description: ''
      tags:
      - api
  /api/competency/sessions/{id}/:
    get:
      operationId: retrieveInterviewSession
      description: ViewSet for managing interview sessions
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this interview session.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewSession'
          description: ''
      tags:
      - api
    put:
      operationId: updateInterviewSession
      description: ViewSet for managing interview sessions
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this interview session.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewSessionUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InterviewSessionUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InterviewSessionUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewSessionUpdate'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateInterviewSession
      description: ViewSet for managing interview sessions
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this interview session.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewSessionUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InterviewSessionUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InterviewSessionUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewSessionUpdate'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyInterviewSession
      description: ViewSet for managing interview sessions
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this interview session.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/competency/sessions/{id}/evaluations/:
    get:
      operationId: evaluationsInterviewSession
      description: Get all evaluations for a specific session
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this interview session.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewSession'
          description: ''
      tags:
      - api
  /api/competency/evaluations/:
    get:
      operationId: listCompetencyEvaluations
      description: ViewSet for managing competency evaluations
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/CompetencyEvaluation'
          description: ''
      tags:
      - api
    post:
      operationId: createCompetencyEvaluation
      description: ViewSet for managing competency evaluations
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetencyEvaluation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CompetencyEvaluation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CompetencyEvaluation'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetencyEvaluation'
          description: ''
      tags:
      - api
  /api/competency/evaluations/{id}/:
    get:
      operationId: retrieveCompetencyEvaluation
      description: ViewSet for managing competency evaluations
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this competency evaluation.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetencyEvaluation'
          description: ''
      tags:
      - api
    put:
      operationId: updateCompetencyEvaluation
      description: ViewSet for managing competency evaluations
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this competency evaluation.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetencyEvaluation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CompetencyEvaluation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CompetencyEvaluation'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetencyEvaluation'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateCompetencyEvaluation
      description: ViewSet for managing competency evaluations
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this competency evaluation.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetencyEvaluation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CompetencyEvaluation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CompetencyEvaluation'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetencyEvaluation'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyCompetencyEvaluation
      description: ViewSet for managing competency evaluations
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this competency evaluation.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/competency/ai-sessions/:
    get:
      operationId: listAIInterviewSessions
      description: ViewSet for managing AI interview sessions
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/AIInterviewSession'
          description: ''
      tags:
      - api
    post:
      operationId: createAIInterviewSession
      description: ViewSet for managing AI interview sessions
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIInterviewSession'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AIInterviewSession'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AIInterviewSession'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIInterviewSession'
          description: ''
      tags:
      - api
  /api/competency/ai-sessions/{id}/:
    get:
      operationId: retrieveAIInterviewSession
      description: ViewSet for managing AI interview sessions
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this ai interview session.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIInterviewSession'
          description: ''
      tags:
      - api
    put:
      operationId: updateAIInterviewSession
      description: ViewSet for managing AI interview sessions
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this ai interview session.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIInterviewSession'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AIInterviewSession'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AIInterviewSession'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIInterviewSession'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateAIInterviewSession
      description: ViewSet for managing AI interview sessions
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this ai interview session.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIInterviewSession'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AIInterviewSession'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AIInterviewSession'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIInterviewSession'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyAIInterviewSession
      description: ViewSet for managing AI interview sessions
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this ai interview session.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/competency/analytics/:
    get:
      operationId: listInterviewAnalytics
      description: ViewSet for interview analytics (read-only)
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/InterviewAnalytics'
          description: ''
      tags:
      - api
  /api/competency/analytics/dashboard_stats/:
    get:
      operationId: dashboardStatsInterviewAnalytics
      description: Get dashboard statistics
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewAnalytics'
          description: ''
      tags:
      - api
  /api/competency/analytics/{id}/:
    get:
      operationId: retrieveInterviewAnalytics
      description: ViewSet for interview analytics (read-only)
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this interview analytics.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewAnalytics'
          description: ''
      tags:
      - api
  /api/competency/llm-prompts/:
    get:
      operationId: listLLMQuestionPrompts
      description: ViewSet for managing LLM question generation prompts
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/LLMQuestionPrompt'
          description: ''
      tags:
      - api
    post:
      operationId: createLLMQuestionPrompt
      description: ViewSet for managing LLM question generation prompts
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LLMQuestionPrompt'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LLMQuestionPrompt'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LLMQuestionPrompt'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLMQuestionPrompt'
          description: ''
      tags:
      - api
  /api/competency/llm-prompts/{id}/:
    get:
      operationId: retrieveLLMQuestionPrompt
      description: ViewSet for managing LLM question generation prompts
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this llm question prompt.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLMQuestionPrompt'
          description: ''
      tags:
      - api
    put:
      operationId: updateLLMQuestionPrompt
      description: ViewSet for managing LLM question generation prompts
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this llm question prompt.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LLMQuestionPrompt'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LLMQuestionPrompt'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LLMQuestionPrompt'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLMQuestionPrompt'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateLLMQuestionPrompt
      description: ViewSet for managing LLM question generation prompts
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this llm question prompt.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LLMQuestionPrompt'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LLMQuestionPrompt'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LLMQuestionPrompt'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLMQuestionPrompt'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyLLMQuestionPrompt
      description: ViewSet for managing LLM question generation prompts
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this llm question prompt.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/competency/llm-generations/:
    get:
      operationId: listLLMQuestionGenerations
      description: ViewSet for viewing LLM question generations
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/LLMQuestionGeneration'
          description: ''
      tags:
      - api
  /api/competency/llm-generations/{id}/:
    get:
      operationId: retrieveLLMQuestionGeneration
      description: ViewSet for viewing LLM question generations
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this llm question generation.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLMQuestionGeneration'
          description: ''
      tags:
      - api
  /api/competency/question-embeddings/:
    get:
      operationId: listQuestionEmbeddings
      description: ViewSet for managing question embeddings
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/QuestionEmbedding'
          description: ''
      tags:
      - api
  /api/candidate-ranking/rank/:
    post:
      operationId: rankCandidatesForJob
      description: Rank candidates for a specific job using intelligent scoring algorithm
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                job_id:
                  type: string
                  description: Job ID to rank candidates for
                  example: "JOB-XXXXXX"
                candidate_ids:
                  type: array
                  items:
                    type: string
                  description: List of candidate IDs to rank
                  example: ["CAN-XXXXXX", "CAN-YYYYYY"]
                criteria_id:
                  type: string
                  description: Optional ranking criteria ID
                  nullable: true
                  example: "criteria-123"
              required:
                - job_id
                - candidate_ids
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  batch_id:
                    type: string
                    example: "BATCH-XXXXXXXX"
                  job_id:
                    type: string
                    example: "JOB-XXXXXX"
                  total_candidates:
                    type: integer
                    example: 4
                  ranked_candidates:
                    type: integer
                    example: 4
                  failed_rankings:
                    type: integer
                    example: 0
                  processing_time_seconds:
                    type: number
                    format: float
                    example: 2.5
                  top_candidates:
                    type: array
                    items:
                      $ref: '#/components/schemas/CandidateRanking'
          description: 'Successfully ranked candidates'
        '400':
          description: 'Bad request - invalid job_id or candidate_ids'
        '404':
          description: 'Job or candidates not found'
        '500':
          description: 'Internal server error'
      tags:
      - candidate-ranking
  /api/candidate-ranking/job/{job_id}/:
    get:
      operationId: getJobRankings
      description: Get all rankings for a specific job
      parameters:
      - name: job_id
        in: path
        required: true
        description: Job ID to get rankings for
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  job_id:
                    type: string
                    example: "JOB-XXXXXX"
                  rankings:
                    type: array
                    items:
                      $ref: '#/components/schemas/CandidateRanking'
                  total_rankings:
                    type: integer
                    example: 4
          description: 'Successfully retrieved job rankings'
        '404':
          description: 'Job not found'
      tags:
      - candidate-ranking
  /api/candidate-ranking/candidate/{candidate_id}/:
    get:
      operationId: getCandidateRankings
      description: Get all rankings for a specific candidate
      parameters:
      - name: candidate_id
        in: path
        required: true
        description: Candidate ID to get rankings for
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  candidate_id:
                    type: string
                    example: "CAN-XXXXXX"
                  rankings:
                    type: array
                    items:
                      $ref: '#/components/schemas/CandidateRanking'
                  total_rankings:
                    type: integer
                    example: 3
          description: 'Successfully retrieved candidate rankings'
        '404':
          description: 'Candidate not found'
      tags:
      - candidate-ranking
  /api/candidate-ranking/ranking/{ranking_id}/status/:
    put:
      operationId: updateRankingStatus
      description: Update ranking status (shortlist/reject)
      parameters:
      - name: ranking_id
        in: path
        required: true
        description: Ranking ID to update
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                is_shortlisted:
                  type: boolean
                  description: Whether to shortlist the candidate
                  example: true
                is_rejected:
                  type: boolean
                  description: Whether to reject the candidate
                  example: false
                hr_notes:
                  type: string
                  description: HR notes about the candidate
                  example: "Strong technical skills"
              required:
                - is_shortlisted
                - is_rejected
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateRanking'
          description: 'Successfully updated ranking status'
        '404':
          description: 'Ranking not found'
        '400':
          description: 'Invalid status update'
      tags:
      - candidate-ranking
  /api/candidate-ranking/batches/:
    get:
      operationId: getRankingBatches
      description: Get all ranking batches
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  batches:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankingBatch'
                  total_batches:
                    type: integer
                    example: 5
          description: 'Successfully retrieved ranking batches'
      tags:
      - candidate-ranking
  /api/candidate-ranking/criteria/:
    get:
      operationId: getRankingCriteria
      description: Get all ranking criteria
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  criteria:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankingCriteria'
                  total_criteria:
                    type: integer
                    example: 3
          description: 'Successfully retrieved ranking criteria'
      tags:
      - candidate-ranking
  /api/candidate-ranking/analytics/{job_id}/:
    get:
      operationId: getRankingAnalytics
      description: Get comprehensive analytics for job rankings
      parameters:
      - name: job_id
        in: path
        required: true
        description: Job ID to get analytics for
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  job_id:
                    type: string
                    example: "JOB-XXXXXX"
                  job_title:
                    type: string
                    example: "Senior Python Developer"
                  total_candidates:
                    type: integer
                    example: 4
                  analytics:
                    $ref: '#/components/schemas/RankingAnalytics'
          description: 'Successfully retrieved ranking analytics'
        '404':
          description: 'Job not found'
      tags:
      - candidate-ranking
  /api/jobs/active/:
    get:
      operationId: getActiveJobs
      description: Get all active jobs for ranking
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  jobs:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobSummary'
                  total_jobs:
                    type: integer
                    example: 10
          description: 'Successfully retrieved active jobs'
      tags:
      - jobs
  /api/token/:
    post:
      operationId: obtainToken
      description: Obtain JWT access and refresh tokens
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                    description: JWT access token
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                  refresh:
                    type: string
                    description: JWT refresh token
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
          description: 'Successfully obtained tokens'
        '401':
          description: 'Invalid credentials'
      tags:
      - authentication
  /api/token/refresh/:
    post:
      operationId: refreshToken
      description: Refresh JWT access token using refresh token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                    description: New JWT access token
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
          description: 'Successfully refreshed token'
        '401':
          description: 'Invalid refresh token'
      tags:
      - authentication
  /api/token/verify/:
    post:
      operationId: verifyToken
      description: Verify JWT token validity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: true
          description: 'Token is valid'
        '401':
          description: 'Token is invalid or expired'
      tags:
      - authentication
  /api/jobs/{job_id}/candidates/:
    get:
      operationId: getCandidatesForJob
      description: Get candidates for a specific job
      parameters:
      - name: job_id
        in: path
        required: true
        description: Job ID to get candidates for
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  job_id:
                    type: string
                    example: "JOB-XXXXXX"
                  candidates:
                    type: array
                    items:
                      $ref: '#/components/schemas/CandidateSummary'
                  total_candidates:
                    type: integer
                    example: 5
          description: 'Successfully retrieved job candidates'
        '404':
          description: 'Job not found'
      tags:
      - jobs
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/QuestionEmbedding'
          description: ''
      tags:
      - api
  /api/competency/question-embeddings/{id}/:
    get:
      operationId: retrieveQuestionEmbedding
      description: ViewSet for managing question embeddings
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this question embedding.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionEmbedding'
          description: ''
      tags:
      - api
  /api/job_descriptions/{id}/match-all-resumes/:
    post:
      operationId: matchAllResumesToJdJobDescription
      description: 'Match all available resumes against a specific job description.

        Returns detailed match results with scores.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Job Description.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobDescription'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/JobDescription'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/JobDescription'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDescription'
          description: ''
      tags:
      - api
  /api/resumes/{id}/match-with-jd/:
    post:
      operationId: matchWithJdResume
      description: 'Match a specific resume with a job description.

        Requires job_description_id in request body.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Resume.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resume'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Resume'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Resume'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume'
          description: ''
      tags:
      - api
  /api/candidates/{id}/manage-skills/:
    post:
      operationId: manageSkillsCandidate
      description: 'Custom action to add or remove skills for a candidate.

        Allows candidates to manage their skill profile after auto-population from
        resume.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Candidate.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Candidate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Candidate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Candidate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
          description: ''
      tags:
      - api
  /api/applications/{id}/update-status/:
    post:
      operationId: updateStatusApplication
      description: Update application status with additional tracking.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this Application.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Application'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: ''
      tags:
      - api
  /api/candidate-portal/apply-job/:
    post:
      operationId: applyJobCandidatePortalViewSet
      description: Submit a job application.
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/candidate-portal/upload-resume/:
    post:
      operationId: uploadResumeCandidatePortalViewSet
      description: Upload resume/CV for a candidate.
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/users/auth/register/:
    post:
      operationId: createUserRegistration
      description: User registration endpoint.
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/users/auth/login/:
    post:
      operationId: createUserLogin
      description: User login endpoint.
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/users/auth/logout/:
    post:
      operationId: createUserLogout
      description: User logout endpoint.
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/users/auth/password-reset/:
    post:
      operationId: createPasswordResetRequest
      description: Request password reset.
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/users/auth/password-reset/confirm/:
    post:
      operationId: createPasswordResetConfirm
      description: Confirm password reset.
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/users/profiles/change_password/:
    post:
      operationId: changePasswordUserProfile
      description: Change user password.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
      tags:
      - api
  /api/users/sessions/{id}/terminate/:
    post:
      operationId: terminateUserSession
      description: Terminate a session.
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSession'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserSession'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserSession'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSession'
          description: ''
      tags:
      - api
  /api/users/admin/users/{id}/activate/:
    post:
      operationId: activateUser
      description: Activate a user.
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this User.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserList'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
      tags:
      - api
  /api/users/admin/users/{id}/deactivate/:
    post:
      operationId: deactivateUser
      description: Deactivate a user.
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this User.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserList'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
      tags:
      - api
  /api/users/admin/users/{id}/suspend/:
    post:
      operationId: suspendUser
      description: Suspend a user.
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this User.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserList'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
      tags:
      - api
  /api/competency/frameworks/{id}/add_competency/:
    post:
      operationId: addCompetencyCompetencyFramework
      description: Add a new competency to the framework
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this competency framework.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetencyFramework'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CompetencyFramework'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CompetencyFramework'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetencyFramework'
          description: ''
      tags:
      - api
  /api/competency/templates/{id}/add_question/:
    post:
      operationId: addQuestionInterviewTemplate
      description: Add a new question to the template
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this interview template.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewTemplate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InterviewTemplate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InterviewTemplate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewTemplate'
          description: ''
      tags:
      - api
  /api/competency/question-bank/advanced_recommendations/:
    post:
      operationId: advancedRecommendationsQuestionBank
      description: Advanced AI-powered question recommendations with detailed analysis
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionBank'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/QuestionBank'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionBank'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionBank'
          description: ''
      tags:
      - api
  /api/competency/question-bank/{id}/increment_usage/:
    post:
      operationId: incrementUsageQuestionBank
      description: Increment usage count when question is used
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this question bank.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionBank'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/QuestionBank'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionBank'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionBank'
          description: ''
      tags:
      - api
  /api/competency/question-bank/{id}/update_success_rate/:
    post:
      operationId: updateSuccessRateQuestionBank
      description: Update success rate based on candidate performance
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this question bank.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionBank'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/QuestionBank'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionBank'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionBank'
          description: ''
      tags:
      - api
  /api/competency/sessions/{id}/add_evaluation/:
    post:
      operationId: addEvaluationInterviewSession
      description: Add a new evaluation to the session
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this interview session.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewSession'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InterviewSession'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InterviewSession'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewSession'
          description: ''
      tags:
      - api
  /api/competency/sessions/{id}/calculate_overall_score/:
    post:
      operationId: calculateOverallScoreInterviewSession
      description: Calculate overall score based on competency evaluations
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this interview session.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewSession'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InterviewSession'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InterviewSession'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewSession'
          description: ''
      tags:
      - api
  /api/competency/sessions/{id}/start_ai_interview/:
    post:
      operationId: startAiInterviewInterviewSession
      description: Start an AI-powered interview session
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this interview session.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewSession'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InterviewSession'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InterviewSession'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewSession'
          description: ''
      tags:
      - api
  /api/competency/ai-sessions/{id}/complete_interview/:
    post:
      operationId: completeInterviewAIInterviewSession
      description: Complete AI interview and generate evaluations
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this ai interview session.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIInterviewSession'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AIInterviewSession'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AIInterviewSession'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIInterviewSession'
          description: ''
      tags:
      - api
  /api/competency/ai-sessions/{id}/submit_response/:
    post:
      operationId: submitResponseAIInterviewSession
      description: Submit candidate response to AI interview
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this ai interview session.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIInterviewSession'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AIInterviewSession'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AIInterviewSession'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIInterviewSession'
          description: ''
      tags:
      - api
  /api/competency/llm-prompts/{id}/batch_generate/:
    post:
      operationId: batchGenerateLLMQuestionPrompt
      description: Generate multiple questions using this prompt
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this llm question prompt.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LLMQuestionPrompt'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LLMQuestionPrompt'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LLMQuestionPrompt'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLMQuestionPrompt'
          description: ''
      tags:
      - api
  /api/competency/llm-prompts/{id}/generate_question/:
    post:
      operationId: generateQuestionLLMQuestionPrompt
      description: Generate a question using this prompt
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this llm question prompt.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LLMQuestionPrompt'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LLMQuestionPrompt'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LLMQuestionPrompt'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLMQuestionPrompt'
          description: ''
      tags:
      - api
  /api/competency/llm-generations/{id}/approve/:
    post:
      operationId: approveLLMQuestionGeneration
      description: Approve a generated question and add to question bank
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this llm question generation.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LLMQuestionGeneration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LLMQuestionGeneration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LLMQuestionGeneration'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLMQuestionGeneration'
          description: ''
      tags:
      - api
  /api/competency/llm-generations/{id}/reject/:
    post:
      operationId: rejectLLMQuestionGeneration
      description: Reject a generated question
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this llm question generation.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LLMQuestionGeneration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LLMQuestionGeneration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LLMQuestionGeneration'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLMQuestionGeneration'
          description: ''
      tags:
      - api
  /api/competency/question-embeddings/generate_embeddings/:
    post:
      operationId: generateEmbeddingsQuestionEmbedding
      description: Generate embeddings for questions that don't have them
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionEmbedding'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/QuestionEmbedding'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionEmbedding'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionEmbedding'
          description: ''
      tags:
      - api
  /api/competency/question-embeddings/semantic_search/:
    post:
      operationId: semanticSearchQuestionEmbedding
      description: Perform semantic search on questions
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionEmbedding'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/QuestionEmbedding'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionEmbedding'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionEmbedding'
          description: ''
      tags:
      - api
  /api/competency/recommend-framework/:
    post:
      operationId: createFrameworkRecommendation
      description: View for recommending competency frameworks based on job descriptions
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/token/:
    post:
      operationId: createTokenObtainPair
      description: 'Takes a set of user credentials and returns an access and refresh
        JSON web

        token pair to prove the authentication of those credentials.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
      tags:
      - api
  /api/token/refresh/:
    post:
      operationId: createTokenRefresh
      description: 'Takes a refresh type JSON web token and returns an access type
        JSON web

        token if the refresh token is valid.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
      tags:
      - api
  /api/token/verify/:
    post:
      operationId: createTokenVerify
      description: 'Takes a token and indicates if it is valid.  This view provides
        no

        information about a token''s fitness for a particular use.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
      tags:
      - api
  /api/candidate-portal/update-profile/:
    put:
      operationId: updateProfileCandidatePortalViewSet
      description: Update candidate profile information.
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/users/profiles/update_profile/:
    put:
      operationId: updateProfileUserProfile
      description: Update current user's profile.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
      tags:
      - api
    patch:
      operationId: updateProfileUserProfile
      description: Update current user's profile.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
      tags:
      - api
  /api/candidate-portal/delete-resume/:
    delete:
      operationId: deleteResumeCandidatePortalViewSet
      description: Delete a resume for a candidate.
      parameters: []
      responses:
        '204':
          description: ''
      tags:
      - api
components:
  schemas:
    JobDescription:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        job_id:
          type: string
          readOnly: true
        title:
          type: string
          description: Job title (e.g., Senior Python Developer)
          maxLength: 255
        company:
          type: string
          description: Company name
          maxLength: 255
        department:
          type: string
          description: Department (e.g., Digital Products, Engineering, Innovation)
          maxLength: 255
        location:
          type: string
          nullable: true
          description: Job location
          maxLength: 255
        description:
          type: string
          description: Full job description
        requirements:
          type: string
          nullable: true
          description: Specific requirements
        experience_level:
          enum:
          - entry
          - junior
          - mid
          - senior
          - lead
          type: string
        min_experience_years:
          type: integer
          maximum: 9223372036854775807
          format: int64
          description: Minimum years of experience
          minimum: 0
        employment_type:
          enum:
          - full_time
          - part_time
          - contract
          - internship
          type: string
        status:
          enum:
          - draft
          - active
          - closed
          type: string
        posted_date:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        processed_text:
          type: string
          readOnly: true
          nullable: true
          description: Preprocessed text for NLP operations
        extracted_skills:
          type: object
          description: Extracted skills from job description
      required:
      - title
      - company
      - department
      - description
    Resume:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        candidate_id:
          type: integer
          writeOnly: true
          description: ID of the candidate this resume belongs to.
        file:
          type: string
          format: binary
          writeOnly: true
          description: Upload the resume file (PDF, DOCX, or TXT).
        uploaded_at:
          type: string
          format: date-time
          readOnly: true
        parsed_text:
          type: string
          readOnly: true
          nullable: true
          description: Extracted text from resume
        processed_text:
          type: string
          readOnly: true
          nullable: true
          description: Preprocessed text for NLP
        extracted_skills:
          type: object
          readOnly: true
          description: Skills extracted from resume
        processing_status:
          enum:
          - pending
          - processing
          - completed
          - failed
          type: string
      required:
      - candidate_id
      - file
    Candidate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        candidate_id:
          type: string
          readOnly: true
        first_name:
          type: string
          maxLength: 100
        last_name:
          type: string
          maxLength: 100
        email:
          type: string
          format: email
          maxLength: 254
        phone:
          type: string
          nullable: true
          maxLength: 20
        city:
          type: string
          nullable: true
          maxLength: 100
        state:
          type: string
          nullable: true
          maxLength: 100
        country:
          type: string
          nullable: true
          maxLength: 100
        current_title:
          type: string
          nullable: true
          maxLength: 255
        current_company:
          type: string
          nullable: true
          maxLength: 255
        total_experience_years:
          type: integer
          maximum: 9223372036854775807
          format: int64
          description: Total years of experience
          minimum: 0
        highest_education:
          enum:
          - high_school
          - associate
          - bachelor
          - master
          - phd
          type: string
          nullable: true
        degree_field:
          type: string
          nullable: true
          maxLength: 255
        skills:
          type: object
          description: List of skills
        status:
          enum:
          - active
          - inactive
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - first_name
      - last_name
      - email
    Match:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        job_description:
          type: integer
        job_description_title:
          type: string
          readOnly: true
        resume:
          type: integer
        candidate_name:
          type: string
          readOnly: true
        candidate_email:
          type: string
          readOnly: true
        overall_score:
          type: string
          format: decimal
          multipleOf: 0.01
          maximum: 1000
          minimum: -1000
          readOnly: true
          description: Overall match score (0-100)
        score_percentage:
          type: string
          readOnly: true
          description: Match score converted to a percentage (e.g., '85.23%').
        is_invited_for_interview:
          type: boolean
        matched_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - job_description
      - resume
    Application:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        application_id:
          type: string
          readOnly: true
        job_description:
          type: integer
        job_description_title:
          type: string
          readOnly: true
        candidate:
          type: integer
        candidate_name:
          type: string
          readOnly: true
        candidate_email:
          type: string
          readOnly: true
        match:
          type: integer
          nullable: true
        match_score:
          type: string
          readOnly: true
        cover_letter:
          type: string
          nullable: true
          description: Cover letter content
        expected_salary:
          type: string
          format: decimal
          multipleOf: 0.01
          maximum: 100000000
          minimum: -100000000
          nullable: true
          description: Expected salary
        salary_currency:
          enum:
          - USD
          - EUR
          - GBP
          - INR
          type: string
        status:
          enum:
          - applied
          - under_review
          - shortlisted
          - interview_scheduled
          - interviewed
          - offer_made
          - offer_accepted
          - offer_declined
          - rejected
          - withdrawn
          type: string
        source:
          enum:
          - ats_match
          - direct_apply
          - referral
          - job_board
          - linkedin
          - other
          type: string
          description: How the candidate found the job
        is_shortlisted:
          type: boolean
        is_interviewed:
          type: boolean
        interview_rounds:
          type: integer
          maximum: 9223372036854775807
          format: int64
          description: Number of interview rounds completed
          minimum: 0
        recruiter_notes:
          type: string
          nullable: true
        hiring_manager_notes:
          type: string
          nullable: true
        candidate_notes:
          type: string
          nullable: true
          description: Notes from candidate
        applied_at:
          type: string
          format: date-time
          readOnly: true
        status_updated_at:
          type: string
          format: date-time
          readOnly: true
        days_since_applied:
          type: string
          readOnly: true
        is_active:
          type: string
          readOnly: true
        conversion_from_match:
          type: string
          readOnly: true
      required:
      - job_description
      - candidate
    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+\z
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        full_name:
          type: string
          readOnly: true
        role:
          enum:
          - hr
          - hiring_manager
          - interviewer
          - candidate
          - admin
          type: string
        role_display:
          type: string
          readOnly: true
        status:
          enum:
          - active
          - inactive
          - suspended
          - pending_verification
          type: string
        status_display:
          type: string
          readOnly: true
        phone_number:
          type: string
          nullable: true
          maxLength: 15
        profile_picture:
          type: string
          format: binary
          nullable: true
        bio:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        last_login_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        email_verified_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        email_notifications:
          type: boolean
        push_notifications:
          type: boolean
      required:
      - username
    HRProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: object
          properties:
            id:
              type: string
              format: uuid
              readOnly: true
            email:
              type: string
              format: email
              readOnly: true
            username:
              type: string
              description: Required. 150 characters or fewer. Letters, digits and
                @/./+/-/_ only.
              pattern: ^[\w.@+-]+\z
              maxLength: 150
            first_name:
              type: string
              maxLength: 150
            last_name:
              type: string
              maxLength: 150
            full_name:
              type: string
              readOnly: true
            role:
              enum:
              - hr
              - hiring_manager
              - interviewer
              - candidate
              - admin
              type: string
            role_display:
              type: string
              readOnly: true
            status:
              enum:
              - active
              - inactive
              - suspended
              - pending_verification
              type: string
            status_display:
              type: string
              readOnly: true
            phone_number:
              type: string
              nullable: true
              maxLength: 15
            profile_picture:
              type: string
              format: binary
              nullable: true
            bio:
              type: string
              nullable: true
            created_at:
              type: string
              format: date-time
              readOnly: true
            last_login_at:
              type: string
              format: date-time
              readOnly: true
              nullable: true
            email_verified_at:
              type: string
              format: date-time
              readOnly: true
              nullable: true
            email_notifications:
              type: boolean
            push_notifications:
              type: boolean
          required:
          - username
          readOnly: true
        department:
          type: string
          nullable: true
          maxLength: 100
        position:
          type: string
          nullable: true
          maxLength: 100
        employee_id:
          type: string
          nullable: true
          maxLength: 50
        can_create_jobs:
          type: boolean
        can_manage_candidates:
          type: boolean
        can_conduct_interviews:
          type: boolean
        can_view_analytics:
          type: boolean
        can_manage_users:
          type: boolean
        preferred_interview_types:
          type: object
        working_hours:
          type: object
    CandidateProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: object
          properties:
            id:
              type: string
              format: uuid
              readOnly: true
            email:
              type: string
              format: email
              readOnly: true
            username:
              type: string
              description: Required. 150 characters or fewer. Letters, digits and
                @/./+/-/_ only.
              pattern: ^[\w.@+-]+\z
              maxLength: 150
            first_name:
              type: string
              maxLength: 150
            last_name:
              type: string
              maxLength: 150
            full_name:
              type: string
              readOnly: true
            role:
              enum:
              - hr
              - hiring_manager
              - interviewer
              - candidate
              - admin
              type: string
            role_display:
              type: string
              readOnly: true
            status:
              enum:
              - active
              - inactive
              - suspended
              - pending_verification
              type: string
            status_display:
              type: string
              readOnly: true
            phone_number:
              type: string
              nullable: true
              maxLength: 15
            profile_picture:
              type: string
              format: binary
              nullable: true
            bio:
              type: string
              nullable: true
            created_at:
              type: string
              format: date-time
              readOnly: true
            last_login_at:
              type: string
              format: date-time
              readOnly: true
              nullable: true
            email_verified_at:
              type: string
              format: date-time
              readOnly: true
              nullable: true
            email_notifications:
              type: boolean
            push_notifications:
              type: boolean
          required:
          - username
          readOnly: true
        linkedin_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
          pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
            .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
            ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF0-9])?(?:\\\
            .(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1-\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\\
            .?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\s]*)?\\z"
        github_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
          pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
            .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
            ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF0-9])?(?:\\\
            .(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1-\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\\
            .?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\s]*)?\\z"
        portfolio_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
          pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
            .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
            ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF0-9])?(?:\\\
            .(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1-\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\\
            .?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\s]*)?\\z"
        preferred_job_types:
          type: object
        preferred_locations:
          type: object
        salary_expectations:
          type: object
        profile_visibility:
          enum:
          - public
          - private
          - recruiters_only
          type: string
        total_applications:
          type: integer
          readOnly: true
        applications_this_month:
          type: integer
          readOnly: true
    UserSession:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: object
          properties:
            id:
              type: string
              format: uuid
              readOnly: true
            email:
              type: string
              format: email
              readOnly: true
            username:
              type: string
              description: Required. 150 characters or fewer. Letters, digits and
                @/./+/-/_ only.
              pattern: ^[\w.@+-]+\z
              maxLength: 150
            first_name:
              type: string
              maxLength: 150
            last_name:
              type: string
              maxLength: 150
            full_name:
              type: string
              readOnly: true
            role:
              enum:
              - hr
              - hiring_manager
              - interviewer
              - candidate
              - admin
              type: string
            role_display:
              type: string
              readOnly: true
            status:
              enum:
              - active
              - inactive
              - suspended
              - pending_verification
              type: string
            status_display:
              type: string
              readOnly: true
            phone_number:
              type: string
              nullable: true
              maxLength: 15
            profile_picture:
              type: string
              format: binary
              nullable: true
            bio:
              type: string
              nullable: true
            created_at:
              type: string
              format: date-time
              readOnly: true
            last_login_at:
              type: string
              format: date-time
              readOnly: true
              nullable: true
            email_verified_at:
              type: string
              format: date-time
              readOnly: true
              nullable: true
            email_notifications:
              type: boolean
            push_notifications:
              type: boolean
          required:
          - username
          readOnly: true
        session_id:
          type: string
          readOnly: true
        ip_address:
          type: string
          nullable: true
        user_agent:
          type: string
          nullable: true
        device_type:
          type: string
          nullable: true
          maxLength: 20
        created_at:
          type: string
          format: date-time
          readOnly: true
        last_activity:
          type: string
          format: date-time
          readOnly: true
        expires_at:
          type: string
          format: date-time
          readOnly: true
        is_active:
          type: boolean
        is_expired:
          type: boolean
          readOnly: true
    UserActivity:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: object
          properties:
            id:
              type: string
              format: uuid
              readOnly: true
            email:
              type: string
              format: email
              readOnly: true
            username:
              type: string
              description: Required. 150 characters or fewer. Letters, digits and
                @/./+/-/_ only.
              pattern: ^[\w.@+-]+\z
              maxLength: 150
            first_name:
              type: string
              maxLength: 150
            last_name:
              type: string
              maxLength: 150
            full_name:
              type: string
              readOnly: true
            role:
              enum:
              - hr
              - hiring_manager
              - interviewer
              - candidate
              - admin
              type: string
            role_display:
              type: string
              readOnly: true
            status:
              enum:
              - active
              - inactive
              - suspended
              - pending_verification
              type: string
            status_display:
              type: string
              readOnly: true
            phone_number:
              type: string
              nullable: true
              maxLength: 15
            profile_picture:
              type: string
              format: binary
              nullable: true
            bio:
              type: string
              nullable: true
            created_at:
              type: string
              format: date-time
              readOnly: true
            last_login_at:
              type: string
              format: date-time
              readOnly: true
              nullable: true
            email_verified_at:
              type: string
              format: date-time
              readOnly: true
              nullable: true
            email_notifications:
              type: boolean
            push_notifications:
              type: boolean
          required:
          - username
          readOnly: true
        activity_type:
          enum:
          - login
          - logout
          - profile_update
          - job_application
          - interview_scheduled
          - resume_upload
          - skill_update
          - password_change
          - email_verification
          type: string
        activity_type_display:
          type: string
          readOnly: true
        description:
          type: string
        metadata:
          type: object
        ip_address:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - activity_type
      - description
    UserList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        full_name:
          type: string
          readOnly: true
        role:
          enum:
          - hr
          - hiring_manager
          - interviewer
          - candidate
          - admin
          type: string
        role_display:
          type: string
          readOnly: true
        status:
          enum:
          - active
          - inactive
          - suspended
          - pending_verification
          type: string
        status_display:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        last_login_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        is_active_user:
          type: string
          readOnly: true
      required:
      - email
    CompetencyFramework:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
        technology:
          type: string
          maxLength: 50
        level:
          enum:
          - junior
          - mid
          - senior
          - lead
          - architect
          type: string
        is_active:
          type: boolean
        competencies:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                readOnly: true
              name:
                type: string
                maxLength: 100
              description:
                type: string
                description: Clear description of the competency
              category:
                type: string
                maxLength: 50
              weight:
                type: integer
                maximum: 10
                minimum: 1
                description: Legacy importance weight (1-10)
              order:
                type: integer
                maximum: 9223372036854775807
                minimum: -9223372036854775808
                format: int64
                description: Display order within framework
              is_active:
                type: boolean
              created_at:
                type: string
                format: date-time
                readOnly: true
              updated_at:
                type: string
                format: date-time
                readOnly: true
            required:
            - description
          readOnly: true
        competency_count:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - name
      - description
      - technology
      - level
    Competency:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
          description: Clear description of the competency
        category:
          type: string
          maxLength: 50
        weight:
          type: integer
          maximum: 10
          minimum: 1
          description: Legacy importance weight (1-10)
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
          description: Display order within framework
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - description
    InterviewTemplate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        framework:
          type: string
        framework_name:
          type: string
          readOnly: true
        framework_technology:
          type: string
          readOnly: true
        description:
          type: string
        duration_minutes:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
          description: Expected interview duration
        is_active:
          type: boolean
        questions:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                readOnly: true
              template:
                type: string
              competency:
                type: string
              competency_name:
                type: string
                readOnly: true
              competency_category:
                type: string
                readOnly: true
              question_text:
                type: string
                description: The actual question to ask
              question_type:
                enum:
                - behavioral
                - technical
                - problem_solving
                - scenario
                - coding
                - situational
                type: string
              difficulty:
                enum:
                - easy
                - medium
                - hard
                type: string
              expected_answer:
                type: string
                description: Legacy expected answer field
              order:
                type: integer
                maximum: 9223372036854775807
                minimum: -9223372036854775808
                format: int64
                default: 0
                description: Question order in template
              is_active:
                type: boolean
              created_at:
                type: string
                format: date-time
                readOnly: true
              updated_at:
                type: string
                format: date-time
                readOnly: true
            required:
            - template
            - competency
            - question_text
          readOnly: true
        question_count:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - name
      - framework
      - description
    InterviewQuestion:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        template:
          type: string
        competency:
          type: string
        competency_name:
          type: string
          readOnly: true
        competency_category:
          type: string
          readOnly: true
        question_text:
          type: string
          description: The actual question to ask
        question_type:
          enum:
          - behavioral
          - technical
          - problem_solving
          - scenario
          - coding
          - situational
          type: string
        difficulty:
          enum:
          - easy
          - medium
          - hard
          type: string
        expected_answer:
          type: string
          description: Legacy expected answer field
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
          default: 0
          description: Question order in template
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - template
      - competency
      - question_text
    QuestionBank:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        question_text:
          type: string
          description: The actual question to ask
        question_type:
          enum:
          - behavioral
          - technical
          - problem_solving
          - scenario
          - coding
          - situational
          type: string
        tags:
          type: object
          description: Tags like ['communication', 'senior', 'technical', 'remote-team']
        difficulty:
          enum:
          - easy
          - medium
          - hard
          type: string
        usage_count:
          type: integer
          readOnly: true
          description: How many times this question has been used
        success_rate:
          type: string
          format: decimal
          multipleOf: 0.01
          maximum: 1000
          minimum: -1000
          readOnly: true
          nullable: true
          description: Success rate based on candidate performance
        evaluation_criteria:
          type: object
          description: Specific criteria to evaluate this question
        expected_answer_points:
          type: object
          description: Key points expected in the answer
        star_structure:
          type: object
          description: 'STAR structure: {situation: '''', task: '''', action: '''',
            result: ''''}'
        car_structure:
          type: object
          description: 'CAR structure: {context: '''', action: '''', result: ''''}'
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - question_text
    InterviewSession:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        candidate:
          type: integer
        candidate_name:
          type: string
          readOnly: true
        candidate_email:
          type: string
          readOnly: true
        job_description:
          type: integer
        job_title:
          type: string
          readOnly: true
        template:
          type: string
        template_name:
          type: string
          readOnly: true
        interviewer_name:
          type: string
          maxLength: 100
        interviewer_email:
          type: string
          format: email
          maxLength: 254
        scheduled_at:
          type: string
          format: date-time
        duration_minutes:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        status:
          enum:
          - scheduled
          - in_progress
          - completed
          - cancelled
          - no_show
          type: string
        notes:
          type: string
        overall_score:
          type: string
          format: decimal
          multipleOf: 0.01
          maximum: 100
          minimum: 0
          nullable: true
        evaluations:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                readOnly: true
              session:
                type: string
              competency:
                type: string
              competency_name:
                type: string
                readOnly: true
              competency_category:
                type: string
                readOnly: true
              score:
                type: string
                format: decimal
                multipleOf: 0.01
                maximum: 100
                minimum: 0
                description: Score out of 100
              level:
                enum:
                - novice
                - beginner
                - competent
                - proficient
                - expert
                type: string
              feedback:
                type: string
              strengths:
                type: string
              areas_for_improvement:
                type: string
              justification:
                type: string
                description: Detailed explanation of the score for transparency and
                  audit trail
              ai_insights:
                type: object
                description: AI-generated insights about the evaluation
              review_notes:
                type: string
                description: Notes for panel review discussions
              created_by:
                type: string
                nullable: true
              reviewed_by:
                type: string
                nullable: true
              review_date:
                type: string
                format: date-time
                nullable: true
              created_at:
                type: string
                format: date-time
                readOnly: true
              updated_at:
                type: string
                format: date-time
                readOnly: true
            required:
            - session
            - competency
            - score
            - level
          readOnly: true
        evaluation_count:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - candidate
      - job_description
      - template
      - scheduled_at
    CompetencyEvaluation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        session:
          type: string
        competency:
          type: string
        competency_name:
          type: string
          readOnly: true
        competency_category:
          type: string
          readOnly: true
        score:
          type: string
          format: decimal
          multipleOf: 0.01
          maximum: 100
          minimum: 0
          description: Score out of 100
        level:
          enum:
          - novice
          - beginner
          - competent
          - proficient
          - expert
          type: string
        feedback:
          type: string
        strengths:
          type: string
        areas_for_improvement:
          type: string
        justification:
          type: string
          description: Detailed explanation of the score for transparency and audit
            trail
        ai_insights:
          type: object
          description: AI-generated insights about the evaluation
        review_notes:
          type: string
          description: Notes for panel review discussions
        created_by:
          type: string
          nullable: true
        reviewed_by:
          type: string
          nullable: true
        review_date:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - session
      - competency
      - score
      - level
    AIInterviewSession:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        session:
          type: string
        session_candidate:
          type: string
          readOnly: true
        session_job_title:
          type: string
          readOnly: true
        llm_model:
          type: string
          maxLength: 50
        conversation_history:
          type: object
          description: Stored conversation with AI
        current_question_index:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        is_active:
          type: boolean
        started_at:
          type: string
          format: date-time
          readOnly: true
        completed_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - session
    InterviewAnalytics:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        session:
          type: string
        session_candidate:
          type: string
          readOnly: true
        session_job_title:
          type: string
          readOnly: true
        total_questions_asked:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        total_time_spent:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
          description: Time in minutes
        confidence_score:
          type: string
          format: decimal
          multipleOf: 0.01
          maximum: 100
          minimum: 0
          nullable: true
        communication_score:
          type: string
          format: decimal
          multipleOf: 0.01
          maximum: 100
          minimum: 0
          nullable: true
        problem_solving_score:
          type: string
          format: decimal
          multipleOf: 0.01
          maximum: 100
          minimum: 0
          nullable: true
        technical_depth_score:
          type: string
          format: decimal
          multipleOf: 0.01
          maximum: 100
          minimum: 0
          nullable: true
        recommendations:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - session
    LLMQuestionPrompt:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
        prompt_template:
          type: string
          description: Template with placeholders like {skill}, {level}, {context}
        question_type:
          enum:
          - technical
          - behavioral
          - situational
          - problem_solving
          - coding
          type: string
        difficulty:
          enum:
          - easy
          - medium
          - hard
          type: string
        target_skills:
          type: object
          description: Skills this prompt targets
        llm_model:
          type: string
          maxLength: 50
        temperature:
          type: number
          description: Creativity level (0.0-1.0)
        max_tokens:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        usage_count:
          type: integer
          readOnly: true
        success_rate:
          type: number
          readOnly: true
          nullable: true
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - name
      - description
      - prompt_template
      - question_type
      - difficulty
    LLMQuestionGeneration:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        prompt:
          type: string
        prompt_name:
          type: string
          readOnly: true
        input_parameters:
          type: object
          description: Parameters used for generation
        generated_question:
          type: string
        generated_metadata:
          type: object
          description: Additional metadata from LLM
        quality_score:
          type: number
          nullable: true
          description: AI-assessed quality score
        human_reviewed:
          type: boolean
        human_rating:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
          nullable: true
          description: Human rating (1-5)
        human_feedback:
          type: string
        status:
          enum:
          - generated
          - reviewed
          - approved
          - rejected
          - added_to_bank
          type: string
        question_bank_entry:
          type: string
          nullable: true
        question_bank_text:
          type: string
          readOnly: true
        tokens_used:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        estimated_cost:
          type: string
          format: decimal
          multipleOf: 1.0e-06
          maximum: 10000
          minimum: -10000
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - prompt
      - input_parameters
      - generated_question
    QuestionEmbedding:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        question:
          type: string
        question_text:
          type: string
          readOnly: true
        question_type:
          type: string
          readOnly: true
        embedding_vector:
          type: object
          description: Vector representation of the question
        model_name:
          type: string
          maxLength: 50
        embedding_dimension:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        embedding_text:
          type: string
          description: Text used to generate the embedding
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - question
      - embedding_vector
      - embedding_text
    InterviewSessionCreate:
      type: object
      properties:
        candidate:
          type: integer
        job_description:
          type: integer
        template:
          type: string
        interviewer_name:
          type: string
          maxLength: 100
        interviewer_email:
          type: string
          format: email
          maxLength: 254
        scheduled_at:
          type: string
          format: date-time
        duration_minutes:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
      required:
      - candidate
      - job_description
      - template
      - scheduled_at
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    TokenRefresh:
      type: object
      properties:
        refresh:
          type: string
        access:
          type: string
          readOnly: true
      required:
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    UserStatusUpdate:
      type: object
      properties:
        status:
          enum:
          - active
          - inactive
          - suspended
          - pending_verification
          type: string
    InterviewSessionUpdate:
      type: object
      properties:
        status:
          enum:
          - scheduled
          - in_progress
          - completed
          - cancelled
          - no_show
          type: string
        notes:
          type: string
        overall_score:
          type: string
          format: decimal
          multipleOf: 0.01
          maximum: 100
          minimum: 0
          nullable: true
        interviewer_name:
          type: string
          maxLength: 100
        interviewer_email:
          type: string
          format: email
          maxLength: 254
    CandidateRanking:
      type: object
      properties:
        ranking_id:
          type: string
          example: "RANK-XXXXXXXX"
        job_id:
          type: string
          example: "JOB-XXXXXX"
        job_title:
          type: string
          example: "Senior Python Developer"
        candidate_id:
          type: string
          example: "CAN-XXXXXX"
        candidate_name:
          type: string
          example: "John Doe"
        candidate_email:
          type: string
          format: email
          example: "john.doe@example.com"
        overall_score:
          type: number
          format: float
          example: 85.5
        skill_score:
          type: number
          format: float
          example: 90.0
        experience_score:
          type: number
          format: float
          example: 80.0
        education_score:
          type: number
          format: float
          example: 85.0
        location_score:
          type: number
          format: float
          example: 75.0
        rank_position:
          type: integer
          example: 1
        is_shortlisted:
          type: boolean
          example: false
        is_rejected:
          type: boolean
          example: false
        hr_notes:
          type: string
          nullable: true
          example: "Strong technical background"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - ranking_id
        - job_id
        - candidate_id
        - overall_score
        - rank_position
    RankingBatch:
      type: object
      properties:
        batch_id:
          type: string
          example: "BATCH-XXXXXXXX"
        job_id:
          type: string
          example: "JOB-XXXXXX"
        total_candidates:
          type: integer
          example: 4
        ranked_candidates:
          type: integer
          example: 4
        failed_rankings:
          type: integer
          example: 0
        processing_time_seconds:
          type: number
          format: float
          example: 2.5
        created_at:
          type: string
          format: date-time
      required:
        - batch_id
        - job_id
        - total_candidates
        - ranked_candidates
    RankingCriteria:
      type: object
      properties:
        criteria_id:
          type: string
          example: "criteria-123"
        name:
          type: string
          example: "Technical Focus"
        description:
          type: string
          example: "Criteria focused on technical skills"
        skill_weight:
          type: number
          format: float
          example: 0.4
        experience_weight:
          type: number
          format: float
          example: 0.3
        education_weight:
          type: number
          format: float
          example: 0.2
        location_weight:
          type: number
          format: float
          example: 0.1
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
      required:
        - criteria_id
        - name
        - skill_weight
        - experience_weight
        - education_weight
        - location_weight
    RankingAnalytics:
      type: object
      properties:
        score_distribution:
          type: object
          properties:
            excellent:
              type: integer
              example: 1
            good:
              type: integer
              example: 2
            average:
              type: integer
              example: 1
            below_average:
              type: integer
              example: 0
        average_scores:
          type: object
          properties:
            overall:
              type: number
              format: float
              example: 82.5
            skill:
              type: number
              format: float
              example: 85.0
            experience:
              type: number
              format: float
              example: 78.0
            education:
              type: number
              format: float
              example: 80.0
            location:
              type: number
              format: float
              example: 75.0
        top_skills:
          type: array
          items:
            type: object
            properties:
              skill:
                type: string
                example: "Python"
              count:
                type: integer
                example: 3
              average_score:
                type: number
                format: float
                example: 88.5
        status_summary:
          type: object
          properties:
            total:
              type: integer
              example: 4
            shortlisted:
              type: integer
              example: 1
            rejected:
              type: integer
              example: 0
            pending:
              type: integer
              example: 3
      required:
        - score_distribution
        - average_scores
        - status_summary
    JobSummary:
      type: object
      properties:
        job_id:
          type: string
          example: "JOB-XXXXXX"
        title:
          type: string
          example: "Senior Python Developer"
        company:
          type: string
          example: "Tech Corp"
        location:
          type: string
          example: "New York, NY"
        status:
          type: string
          enum: ["active", "open", "closed", "draft"]
          example: "active"
        created_at:
          type: string
          format: date-time
      required:
        - job_id
        - title
        - status
    CandidateSummary:
      type: object
      properties:
        candidate_id:
          type: string
          example: "CAN-XXXXXX"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        phone:
          type: string
          nullable: true
          example: "+1-555-0123"
        location:
          type: string
          nullable: true
          example: "New York, NY"
        experience_years:
          type: integer
          nullable: true
          example: 5
        skills:
          type: array
          items:
            type: string
          example: ["Python", "Django", "React"]
        created_at:
          type: string
          format: date-time
      required:
        - candidate_id
        - name
        - email
